[project]
name = "src"
version = "1.0.0"
description = "Digimon Digital Card Battle Guide"
requires-python = ">=3.10"
dependencies = [
    "fastapi[standard]",
    "pydantic",
    "pydantic-settings",
    "alembic",
    "psycopg[binary]",
    "sqlmodel",
    "scrapy",
    "twisted==21.7.0", #new versions, 22.10.0 issue with scrapy
    "pillow", #scrapy image pipeline
    "numpy",
    "pandas",
    "matplotlib",
    "japanize_matplotlib",
    "torch",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["--import-mode=importlib", "-p no:warnings"]
testpaths = ["test"]
python_files = ["*.py", "main.py"]
python_functions = ["*"]
asyncio_mode = "auto"

[tool.uv]
dev-dependencies = [
    "pytest",
    "pytest-asyncio",
    "anyio",
    "aiosqlite",
    "ruff<1.0.0,>=0.2.2",
    "ipykernel",
]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
    "C416",  # Unnecessary `list` comprehension (rewrite using `list()`)
    "C408",  # Unnecessary `dict` call (rewrite as a literal)
    "B905",  # `zip()` without an explicit `strict=` parameter
    "UP008", # Use `super()` instead of `super(__class__, self)`
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true